from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.cross_validation import StratifiedKFold # Add important libs

#seprate data to train and test
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=0)

#parameters for grid search
parameter_gridsearch = {
                 'max_depth' : [4,5,6,7,8,9],  #depth of each decision tree
                 'n_estimators': [50,100,150],  #count of decision tree
                 'max_features': ['sqrt', 'auto', 'log2'],      
                 'min_samples_split': [2],      
                 'min_samples_leaf': [1, 3, 4],
                 'bootstrap': [True, False],
                 }

clf = RandomForestClassifier()
crossvalidation = StratifiedKFold(y_train , n_folds=5)

gridsearch = GridSearchCV(clf,             #grid search for algorithm optimization
                               scoring='accuracy',
                               param_grid=parameter_gridsearch,
                               cv=crossvalidation)


gridsearch.fit(X_train, y_train)
model = gridsearch
parameters = gridsearch.best_params_ #best parameter for choosing
print('Best Score: {}'.format(gridsearch.best_score_))
preds = gridsearch.predict(X_test)



#implement model on Test data and test it
preds = clf.predict(X_test)
sum(preds==y_test)/y_test.shape[0]
